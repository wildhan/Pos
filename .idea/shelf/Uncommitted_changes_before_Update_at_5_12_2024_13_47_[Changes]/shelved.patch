Index: app/src/main/java/com/example/pos/feature/input_uang_masuk/InputUangMasukFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pos.feature.input_uang_masuk\r\n\r\nimport android.Manifest\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.graphics.Color\r\nimport android.graphics.ImageDecoder\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.activity.result.ActivityResult\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport com.example.pos.databinding.DialogSelectResourceBinding\r\nimport com.example.pos.databinding.FragmentInputUangMasukBinding\r\nimport com.example.pos.util.currentDate\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport java.io.IOException\r\n\r\nclass InputUangMasukFragment : Fragment() {\r\n    private val viewModel: InputUangMasukViewModel by activityViewModels()\r\n    private lateinit var binding: FragmentInputUangMasukBinding\r\n    private var dialog: AlertDialog? = null\r\n    private var imageUri: String = \"\"\r\n    private val permission = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n        arrayOf(\r\n            Manifest.permission.CAMERA,\r\n            Manifest.permission.READ_MEDIA_IMAGES,\r\n        )\r\n    } else {\r\n        arrayOf(\r\n            Manifest.permission.READ_EXTERNAL_STORAGE,\r\n            Manifest.permission.CAMERA,\r\n            Manifest.permission.WRITE_EXTERNAL_STORAGE\r\n        )\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentInputUangMasukBinding.inflate(inflater, container, false)\r\n        initUi()\r\n        onClickEvent()\r\n        return binding.root\r\n    }\r\n\r\n    private fun initUi() {\r\n        viewModel.isValidated.observe(viewLifecycleOwner) { isvalidated ->\r\n            if (!isvalidated) {\r\n//                show message error on fragment screen\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun onClickEvent() {\r\n        binding.apply {\r\n            btnSave.setOnClickListener {\r\n                viewModel.insert(\r\n                    to = tietTo.text.toString(),\r\n                    from = tietFrom.text.toString(),\r\n                    total = tietTotal.text.toString(),\r\n                    note = tietNote.text.toString(),\r\n                    type = tietType.text.toString(),\r\n                    date = currentDate(),\r\n                    imageUri = imageUri\r\n                )\r\n            }\r\n            cvImage.setOnClickListener {\r\n                if (imageUri.isEmpty())\r\n                    checkPermissionGallery()\r\n            }\r\n            btnImgEdit.setOnClickListener {\r\n                checkPermissionGallery()\r\n            }\r\n            btnImgDelete.setOnClickListener {\r\n                imageUri = \"\"\r\n                ivPhoto.setImageBitmap(null)\r\n                llButton.visibility = View.GONE\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showSelectDialog() {\r\n        val dialogView = DialogSelectResourceBinding.inflate(layoutInflater)\r\n        dialog = AlertDialog.Builder(this.requireContext())\r\n            .setView(dialogView.root)\r\n            .create()\r\n\r\n        dialog!!.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n\r\n        with(dialogView) {\r\n            ivCamera.setOnClickListener {\r\n\r\n            }\r\n            ivGallery.setOnClickListener {\r\n                imageChooser()\r\n            }\r\n        }\r\n\r\n        dialog!!.show()\r\n\r\n    }\r\n\r\n    private fun dismissDialog() {\r\n        if (dialog!!.isShowing)\r\n            dialog!!.dismiss()\r\n    }\r\n\r\n    private fun imageChooser() {\r\n        dismissDialog()\r\n        val intent = Intent()\r\n        intent.setType(\"image/*\")\r\n        intent.setAction(Intent.ACTION_GET_CONTENT)\r\n\r\n        launchSomeActivity.launch(intent)\r\n    }\r\n\r\n    private var launchSomeActivity\r\n            : ActivityResultLauncher<Intent> = registerForActivityResult<Intent, ActivityResult>(\r\n        ActivityResultContracts.StartActivityForResult()\r\n    ) { result: ActivityResult ->\r\n        if (result.resultCode\r\n            == AppCompatActivity.RESULT_OK\r\n        ) {\r\n            val data = result.data\r\n            // do your operation from here....\r\n            if (data != null && data.data != null\r\n            ) {\r\n                val selectedImageUri = data.data\r\n                setImageView(selectedImageUri)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setImageView(uri: Uri?) {\r\n        var selectedImageBitmap: Bitmap? = null\r\n        try {\r\n            selectedImageBitmap = when {\r\n                Build.VERSION.SDK_INT < Build.VERSION_CODES.P -> {\r\n                    MediaStore.Images.Media.getBitmap(\r\n                        this.requireContext().contentResolver,\r\n                        uri\r\n                    )\r\n                }\r\n\r\n                else -> {\r\n                    val source = ImageDecoder.createSource(\r\n                        this.requireContext().contentResolver,\r\n                        uri!!\r\n                    )\r\n                    ImageDecoder.decodeBitmap(source)\r\n                }\r\n            }\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n\r\n        if (selectedImageBitmap != null) {\r\n            imageUri = uri.toString()\r\n            binding.apply {\r\n                ivPhoto.setImageBitmap(selectedImageBitmap)\r\n                llButton.visibility = View.VISIBLE\r\n            }\r\n        } else {\r\n            Toast.makeText(requireContext(), \"Gagal menampilkan gambar\", Toast.LENGTH_SHORT)\r\n                .show()\r\n        }\r\n    }\r\n\r\n\r\n    private fun checkPermissionGallery() {\r\n        when {\r\n            hasPermissions(requireContext(), permission) -> {\r\n                showSelectDialog()\r\n            }\r\n\r\n            showPermissionRationale(permission)\r\n            -> {\r\n                Snackbar.make(binding.root, \"Permission Denied\", Snackbar.LENGTH_SHORT)\r\n            }\r\n\r\n            else -> {\r\n                requestMultiplePermissions.launch(\r\n                    permission\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private val requestMultiplePermissions = registerForActivityResult(\r\n        ActivityResultContracts.RequestMultiplePermissions()\r\n    ) { permissions ->\r\n        val granted = permissions.entries.all {\r\n            it.value\r\n        }\r\n        if (granted) {\r\n            showSelectDialog()\r\n        } else {\r\n            Snackbar.make(binding.root, \"Permission Denied\", Snackbar.LENGTH_SHORT)\r\n        }\r\n    }\r\n\r\n    private fun hasPermissions(context: Context, permissions: Array<String>): Boolean =\r\n        permissions.all {\r\n            ActivityCompat.checkSelfPermission(context, it) == PackageManager.PERMISSION_GRANTED\r\n        }\r\n\r\n    private fun showPermissionRationale(permissions: Array<String>): Boolean =\r\n        permissions.all {\r\n            shouldShowRequestPermissionRationale(it)\r\n        }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/pos/feature/input_uang_masuk/InputUangMasukFragment.kt b/app/src/main/java/com/example/pos/feature/input_uang_masuk/InputUangMasukFragment.kt
--- a/app/src/main/java/com/example/pos/feature/input_uang_masuk/InputUangMasukFragment.kt	(revision bddc26591db71b3273e686cefb25ace03ef60e98)
+++ b/app/src/main/java/com/example/pos/feature/input_uang_masuk/InputUangMasukFragment.kt	(date 1715496451696)
@@ -44,7 +44,7 @@
         arrayOf(
             Manifest.permission.READ_EXTERNAL_STORAGE,
             Manifest.permission.CAMERA,
-            Manifest.permission.WRITE_EXTERNAL_STORAGE
+//            Manifest.permission.WRITE_EXTERNAL_STORAGE
         )
     }
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision bddc26591db71b3273e686cefb25ace03ef60e98)
+++ b/.idea/misc.xml	(date 1715496451700)
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision bddc26591db71b3273e686cefb25ace03ef60e98)
+++ b/.idea/deploymentTargetSelector.xml	(date 1715496451710)
@@ -4,6 +4,14 @@
     <selectionStates>
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
+        <DropdownSelection timestamp="2024-05-11T17:59:46.939002700Z">
+          <Target type="DEFAULT_BOOT">
+            <handle>
+              <DeviceId pluginId="PhysicalDevice" identifier="serial=90a76b00" />
+            </handle>
+          </Target>
+        </DropdownSelection>
+        <DialogSelection />
       </SelectionState>
     </selectionStates>
   </component>
Index: app/src/main/java/com/example/pos/feature/edit_uang_masuk/EditUangMasukFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pos.feature.edit_uang_masuk\r\n\r\nimport android.Manifest\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.graphics.Color\r\nimport android.graphics.ImageDecoder\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.activity.result.ActivityResult\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport com.example.pos.data.model.local.Record\r\nimport com.example.pos.databinding.DialogSelectResourceBinding\r\nimport com.example.pos.databinding.FragmentEditUangMasukBinding\r\nimport com.example.pos.util.toUri\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport java.io.IOException\r\n\r\nclass EditUangMasukFragment : Fragment() {\r\n    private val viewModel: EditUangMasukViewModel by activityViewModels()\r\n    private lateinit var binding: FragmentEditUangMasukBinding\r\n    private var dialog: AlertDialog? = null\r\n    private var imageUri: String = \"\"\r\n    private var currentDate: Long? = null\r\n\r\n    private val permission = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n        arrayOf(\r\n            Manifest.permission.CAMERA,\r\n            Manifest.permission.READ_MEDIA_IMAGES,\r\n        )\r\n    } else {\r\n        arrayOf(\r\n            Manifest.permission.READ_EXTERNAL_STORAGE,\r\n            Manifest.permission.CAMERA,\r\n            Manifest.permission.WRITE_EXTERNAL_STORAGE\r\n        )\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentEditUangMasukBinding.inflate(inflater, container, false)\r\n        initUi()\r\n        onClickEvent()\r\n        return binding.root\r\n    }\r\n\r\n\r\n    private fun initUi() {\r\n        val id = arguments?.getInt(\"id\")\r\n        viewModel.isValidated.observe(viewLifecycleOwner) { isvalidated ->\r\n            if (!isvalidated) {\r\n//                show message error on fragment screen\r\n            }\r\n        }\r\n        CoroutineScope(Dispatchers.Main).launch {\r\n            id?.let {\r\n                viewModel.getRecord(it).observe(viewLifecycleOwner) { records ->\r\n                    viewModel.setupRecord(records?.get(0))\r\n                    initRecords(records?.get(0))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun initRecords(records: Record?) {\r\n        binding.apply {\r\n            tietTo.setText(records?.to)\r\n            tietFrom.setText(records?.from)\r\n            tietTotal.setText(records?.total)\r\n            tietNote.setText(records?.note)\r\n            tietType.setText(records?.type)\r\n            currentDate = records?.date\r\n            if (!records?.imageUri.isNullOrEmpty())\r\n                setImageView(records?.imageUri?.toUri())\r\n        }\r\n    }\r\n\r\n    private fun onClickEvent() {\r\n        binding.apply {\r\n            btnSave.setOnClickListener {\r\n                viewModel.insert(\r\n                    to = tietTo.text.toString(),\r\n                    from = tietFrom.text.toString(),\r\n                    total = tietTotal.text.toString(),\r\n                    note = tietNote.text.toString(),\r\n                    type = tietType.text.toString(),\r\n                    date = currentDate,\r\n                    imageUri = imageUri\r\n                )\r\n            }\r\n            cvImage.setOnClickListener {\r\n                if (imageUri.isEmpty())\r\n                    checkPermissionGallery()\r\n            }\r\n            btnImgEdit.setOnClickListener {\r\n                checkPermissionGallery()\r\n            }\r\n            btnImgDelete.setOnClickListener {\r\n                imageUri = \"\"\r\n                ivPhoto.setImageBitmap(null)\r\n                llButton.visibility = View.GONE\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showSelectDialog() {\r\n        val dialogView = DialogSelectResourceBinding.inflate(layoutInflater)\r\n        dialog = AlertDialog.Builder(this.requireContext())\r\n            .setView(dialogView.root)\r\n            .create()\r\n\r\n        dialog!!.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n\r\n        with(dialogView) {\r\n            ivCamera.setOnClickListener {\r\n\r\n            }\r\n            ivGallery.setOnClickListener {\r\n                imageChooser()\r\n            }\r\n        }\r\n\r\n        dialog!!.show()\r\n\r\n    }\r\n\r\n    private fun dismissDialog() {\r\n        if (dialog!!.isShowing)\r\n            dialog!!.dismiss()\r\n    }\r\n\r\n    private fun imageChooser() {\r\n        dismissDialog()\r\n        val intent = Intent()\r\n        intent.setType(\"image/*\")\r\n        intent.setAction(Intent.ACTION_GET_CONTENT)\r\n\r\n        launchSomeActivity.launch(intent)\r\n    }\r\n\r\n    private var launchSomeActivity\r\n            : ActivityResultLauncher<Intent> = registerForActivityResult<Intent, ActivityResult>(\r\n        ActivityResultContracts.StartActivityForResult()\r\n    ) { result: ActivityResult ->\r\n        if (result.resultCode\r\n            == AppCompatActivity.RESULT_OK\r\n        ) {\r\n            val data = result.data\r\n            // do your operation from here....\r\n            if (data != null && data.data != null\r\n            ) {\r\n                val selectedImageUri = data.data\r\n                setImageView(selectedImageUri)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setImageView(uri: Uri?) {\r\n        var selectedImageBitmap: Bitmap? = null\r\n        if (uri != null) {\r\n            try {\r\n                selectedImageBitmap = when {\r\n                    Build.VERSION.SDK_INT < Build.VERSION_CODES.P -> {\r\n                        MediaStore.Images.Media.getBitmap(\r\n                            this.requireContext().contentResolver,\r\n                            uri\r\n                        )\r\n                    }\r\n\r\n                    else -> {\r\n                        val source = ImageDecoder.createSource(\r\n                            this.requireContext().contentResolver,\r\n                            uri\r\n                        )\r\n                        ImageDecoder.decodeBitmap(source)\r\n                    }\r\n                }\r\n            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n\r\n        if (selectedImageBitmap != null) {\r\n            imageUri = uri.toString()\r\n            binding.apply {\r\n                ivPhoto.setImageBitmap(selectedImageBitmap)\r\n                llButton.visibility = View.VISIBLE\r\n            }\r\n        } else {\r\n            Toast.makeText(requireContext(), \"Gagal menampilkan gambar\", Toast.LENGTH_SHORT)\r\n                .show()\r\n        }\r\n    }\r\n\r\n\r\n    private fun checkPermissionGallery() {\r\n        when {\r\n            hasPermissions(requireContext(), permission) -> {\r\n                showSelectDialog()\r\n            }\r\n\r\n            showPermissionRationale(permission)\r\n            -> {\r\n                Snackbar.make(binding.root, \"Permission Denied\", Snackbar.LENGTH_SHORT)\r\n            }\r\n\r\n            else -> {\r\n                requestMultiplePermissions.launch(\r\n                    permission\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private val requestMultiplePermissions = registerForActivityResult(\r\n        ActivityResultContracts.RequestMultiplePermissions()\r\n    ) { permissions ->\r\n        val granted = permissions.entries.all {\r\n            it.value\r\n        }\r\n        if (granted) {\r\n            showSelectDialog()\r\n        } else {\r\n            Snackbar.make(binding.root, \"Permission Denied\", Snackbar.LENGTH_SHORT)\r\n        }\r\n    }\r\n\r\n    private fun hasPermissions(context: Context, permissions: Array<String>): Boolean =\r\n        permissions.all {\r\n            ActivityCompat.checkSelfPermission(context, it) == PackageManager.PERMISSION_GRANTED\r\n        }\r\n\r\n    private fun showPermissionRationale(permissions: Array<String>): Boolean =\r\n        permissions.all {\r\n            shouldShowRequestPermissionRationale(it)\r\n        }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/pos/feature/edit_uang_masuk/EditUangMasukFragment.kt b/app/src/main/java/com/example/pos/feature/edit_uang_masuk/EditUangMasukFragment.kt
--- a/app/src/main/java/com/example/pos/feature/edit_uang_masuk/EditUangMasukFragment.kt	(revision bddc26591db71b3273e686cefb25ace03ef60e98)
+++ b/app/src/main/java/com/example/pos/feature/edit_uang_masuk/EditUangMasukFragment.kt	(date 1715496451706)
@@ -90,8 +90,8 @@
             tietNote.setText(records?.note)
             tietType.setText(records?.type)
             currentDate = records?.date
-            if (!records?.imageUri.isNullOrEmpty())
-                setImageView(records?.imageUri?.toUri())
+//            if (!records?.imageUri.isNullOrEmpty())
+//                setImageView(records?.imageUri?.toUri())
         }
     }
 
